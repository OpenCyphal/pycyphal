[metadata]
name            = pyuavcan
version         = file: pyuavcan/VERSION
author          = UAVCAN Development Team
author_email    = maintainers@uavcan.org
url             = https://uavcan.org
description     = A full-featured implementation of the UAVCAN protocol stack in Python.
long_description = file: README.md
long_description_content_type = text/markdown
license = MIT
keywords =
    uavcan
    data-bus
    can-bus
    ethernet
    vehicular
    onboard-networking
    avionics
    communication-protocol
classifiers =
    Intended Audience :: Developers
    Topic :: Scientific/Engineering
    Topic :: Software Development :: Embedded Systems
    Topic :: Software Development :: Libraries :: Python Modules
    Topic :: Software Development :: Object Brokering
    Topic :: System :: Distributed Computing
    Topic :: System :: Networking
    License :: OSI Approved :: MIT License
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9

# ========================================  OPTIONAL DEPENDENCIES  ========================================

[options.extras_require]
# Key name format: "transport_<transport-name>_<media-name>"; e.g.: "transport_ieee802154_xbee".
# If there is no media sub-layer, or the media dependencies are shared, or it is desired to have a common
# option for all media types, the media part may be omitted from the key.

transport_can_pythoncan =
    python-can[serial] ~= 3.3

transport_serial =
    pyserial ~= 3.4
    cobs     ~= 1.1.4

transport_udp =
    libpcap >= 1.10.0b15, < 2.0.0

# Command-line tool. This is not a transport.
# Per ruamel.yaml docs: "For production systems you should pin the version being used with ``ruamel.yaml<=0.15``"
cli =
    ruamel.yaml    < 0.16
    requests       ~= 2.24
    simplejson     ~= 3.17

# ========================================  PACKAGE CONFIGURATION  ========================================

[options]
zip_safe             = False
include_package_data = True
packages             = find:
# Think thrice before adding anything here, please.
# The preferred long-term plan is to avoid adding any new required dependencies whatsoever for the project's lifetime.
install_requires =
    nunavut ~= 0.4
    numpy   ~= 1.19

[options.packages.find]
# https://setuptools.readthedocs.io/en/latest/setuptools.html#find-namespace-packages
include =
    pyuavcan
    pyuavcan.*

[options.entry_points]
# Scripts and their abridged aliases.
console_scripts =
    pyuavcan = pyuavcan._cli:main
    uvc      = pyuavcan._cli:main

[options.package_data]
# jingle bells jingle bells
# jingle all the way
* =
        *
       */*
      */*/*
     */*/*/*
    */*/*/*/*
# oh what fun it is to ride
# in a one-horse open sleigh

# ========================================  DEVELOPMENT AND MAINTENANCE  ========================================

[tool:pytest]
# https://docs.pytest.org/en/latest/pythonpath.html#invoking-pytest-versus-python-m-pytest
# - Application is excluded because it requires the uavcan DSDL package to be generated. Hence there are no unit tests.
# - CLI is excluded because it requires additional third-party dependencies. They require separate environment config.
# - Public regulated data types do not contain any testable Python files, it's just a DSDL repo.
# - Demo application scripts cannot be imported; they are designed to be runnable.
# - The import_error package is designed to fail to import, so it has to be excluded obviously.
norecursedirs =
    pyuavcan/application
    pyuavcan/_cli
    tests/public_regulated_data_types
    tests/demo
    tests/util/import_error
testpaths        = pyuavcan tests
python_files     = *.py
python_classes   = _UnitTest
python_functions = _unittest_
# Verbose logging is required to ensure full coverage of conditional logging branches.
log_level        = DEBUG
log_cli_level    = WARNING
log_cli          = true
log_file         = pytest.log
addopts          = --doctest-modules -v
# Deprecation warnings must be ignored because some of the tested generated data types are marked deprecated on purpose.
# NumPy sometimes emits "invalid value encountered in multiply" which we don't care about.
filterwarnings =
    error
    ignore::DeprecationWarning
    ignore:invalid value encountered in multiply:RuntimeWarning
    ignore:.*experimental extension.*:RuntimeWarning

[mypy]
# Python version is not specified to allow checking against different versions.
warn_return_any        = True
warn_unused_configs    = True
disallow_untyped_defs  = True
check_untyped_defs     = True
no_implicit_optional   = True
warn_redundant_casts   = True
warn_unused_ignores    = True
show_error_context     = True
mypy_path =
    .test_dsdl_generated

[mypy-pytest]
ignore_missing_imports = True

[mypy-pydsdl]
ignore_missing_imports = True

[mypy-nunavut]
ignore_missing_imports = True

[mypy-nunavut.*]
ignore_missing_imports = True

[mypy-numpy]
ignore_missing_imports = True

[mypy-ruamel.*]
ignore_missing_imports = True
implicit_reexport = True

[mypy-serial]
ignore_missing_imports = True

[mypy-coloredlogs]
ignore_missing_imports = True

[coverage:run]
data_file = .coverage
branch    = True
parallel  = True
source =
    pyuavcan
    tests

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    assert False
    if False:
    if __name__ == .__main__.:

[pycodestyle]
# E221 multiple spaces before operator
# E241 multiple spaces after ':'
# W503 line break before binary operator (this is actually the recommended style, the linter is wrong here)
ignore          = E221, E241, W503
max-line-length = 120
show-source     = True
exclude         = tests/public_regulated_data_types
